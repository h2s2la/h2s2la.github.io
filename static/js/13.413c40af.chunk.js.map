{"version":3,"sources":["utils/axiosHandler.js","api/board.js","components/@extended/DataTable.js","pages/board/Board.js"],"names":["axiosInstance","axios","create","baseURL","process","paramsSerializer","params","qs","stringify","interceptors","request","use","config","err","Promise","reject","response","_ref","data","POST_URL","getPostList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","abrupt","get","stop","_x","apply","arguments","getPost","_ref3","_callee2","_ref2","id","_context2","concat","_x2","deletePost","_ref5","_callee3","_ref4","_context3","delete","_x3","createPost","_ref6","_callee4","_context4","post","_x4","updatePost","_ref8","_callee5","_ref7","_context5","put","_x5","_x6","DataTable","columns","rows","_ref$rowsPerPageOptio","rowsPerPageOptions","isLoading","rowClick","_useState","useState","_useState2","_slicedToArray","page","setPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","_jsxs","_Fragment","children","_jsx","TableContainer","sx","maxHeight","Table","stickyHeader","TableHead","TableRow","map","column","TableCell","align","style","width","label","TableBody","colSpan","Box","py","minHeight","CircularProgress","slice","row","hover","tabIndex","onClick","e","cursor","value","render","TablePagination","component","count","length","onPageChange","event","newPage","onRowsPerPageChange","target","Board","navigate","useNavigate","setData","setLoading","useEffect","findPostList","sent","useCallback","postId","Grid","container","direction","justifyContent","spacing","item","Button","variant"],"mappings":"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","file":"static/js/13.413c40af.chunk.js","sourcesContent":["import axios from 'axios';\nimport qs from 'qs';\n\nconst axiosInstance = axios.create({\n\tbaseURL: process.env.REACT_APP_API_SERVER,\n\tparamsSerializer: (params) => qs.stringify(params),\n});\n\naxiosInstance.interceptors.request.use(\n\t(config) => {\n\t\treturn config;\n\t},\n\t(err) => {\n\t\t// eslint-disable-next-line no-undef\n\t\treturn Promise.reject(err);\n\t},\n);\n\naxiosInstance.interceptors.response.use(({data: response}) => {\n\treturn response;\n});\nexport default axiosInstance;\n\n","import {default as axios} from 'utils/axiosHandler';\n\nconst POST_URL = '/api/v1/posts';\n\nexport const getPostList = async (params) => axios.get(POST_URL, params);\n\nexport const getPost = async ({id}) => axios.get(`${POST_URL}/${id}`);\n\nexport const deletePost = async ({id}) => axios.delete(`${POST_URL}/${id}`);\n\nexport const createPost = async (params) => axios.post(`${POST_URL}`, params);\n\nexport const updatePost = async ({id}, params) =>\n\taxios.put(`${POST_URL}/${id}`, params);\n","import React from 'react';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TableHead, TableBody, TableCell, TableContainer, TablePagination, TableRow, Table, Box, CircularProgress } from '@mui/material';\n\nconst DataTable = ({ columns, rows, rowsPerPageOptions = [10, 25, 100], isLoading, rowClick }) => {\n\tconst [page, setPage] = useState(0);\n\tconst [rowsPerPage, setRowsPerPage] = useState(10);\n\n\tconst handleChangeRowsPerPage = (event) => {\n\t\tsetRowsPerPage(+event.target.value);\n\t\tsetPage(0);\n\t};\n\n\tconst handleChangePage = (event, newPage) => {\n\t\tsetPage(newPage);\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer sx={{ maxHeight: 440 }}>\n\t\t\t\t<Table stickyHeader aria-label=\"sticky table\">\n\t\t\t\t\t<TableHead>\n\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t{columns.map((column) => (\n\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'} style={{ width: column.width }}>\n\t\t\t\t\t\t\t\t\t{column.label}\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t</TableHead>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{!isLoading ? (\n\t\t\t\t\t\t\trows &&\n\t\t\t\t\t\t\trows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<TableRow\n\t\t\t\t\t\t\t\t\t\thover\n\t\t\t\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t\t\t\t\tkey={row.id}\n\t\t\t\t\t\t\t\t\t\tonClick={rowClick ? (e) => rowClick(e, row) : () => {}}\n\t\t\t\t\t\t\t\t\t\tstyle={{ cursor: 'pointer' }}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{columns.map((column) => {\n\t\t\t\t\t\t\t\t\t\t\tconst value = row[column.id];\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<TableCell key={column.id} align={column.align ? column.align : 'center'}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{column.render ? column.render(row) : value}\n\t\t\t\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t<TableRow>\n\t\t\t\t\t\t\t\t<TableCell align=\"center\" colSpan={6}>\n\t\t\t\t\t\t\t\t\t<Box sx={{ py: 3, minHeight: 560 }}>\n\t\t\t\t\t\t\t\t\t\t<CircularProgress />\n\t\t\t\t\t\t\t\t\t</Box>\n\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t\t<TablePagination\n\t\t\t\trowsPerPageOptions={rowsPerPageOptions}\n\t\t\t\tcomponent=\"div\"\n\t\t\t\tcount={rows ? rows.length : 0}\n\t\t\t\trowsPerPage={rowsPerPage}\n\t\t\t\tpage={page}\n\t\t\t\tonPageChange={handleChangePage}\n\t\t\t\tonRowsPerPageChange={handleChangeRowsPerPage}\n\t\t\t/>\n\t\t</>\n\t);\n};\n\nexport default DataTable;\n\nDataTable.propTypes = {\n\tcolumns: PropTypes.array,\n\trows: PropTypes.array,\n\trowsPerPageOptions: PropTypes.array,\n\tisLoading: PropTypes.bool,\n\trowClick: PropTypes.func\n};\n","import React, {useCallback, useEffect, useState} from 'react';\nimport {Button, Grid} from '@mui/material';\nimport DataTable from 'components/@extended/DataTable';\nimport {useNavigate} from 'react-router-dom';\nimport {getPostList} from 'api/board';\n\nconst Board = () => {\n\tconst navigate = useNavigate();\n\n\tconst [data, setData] = useState([]);\n\tconst [isLoading, setLoading] = useState(false);\n\n\tuseEffect(() => {\n\t\tfindPostList();\n\t}, []);\n\n\tconst findPostList = async () => {\n\t\tsetLoading(true);\n\t\tconst response = await getPostList();\n\t\tsetData(response);\n\t\tsetLoading(false);\n\t};\n\n\tconst moveCreatePostPage = () => {\n\t\tnavigate(`/post/write`);\n\t};\n\n\tconst rowClick = useCallback((e, row) => {\n\t\tconst postId = row.id;\n\t\tnavigate(`/post/${postId}`);\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t<Grid\n\t\t\t\tcontainer\n\t\t\t\tdirection='row'\n\t\t\t\tjustifyContent='flex-end'\n\t\t\t\tspacing={2}\n\t\t\t>\n\t\t\t\t<Grid item>\n\t\t\t\t\t<Button variant='contained' onClick={moveCreatePostPage}>\n\t\t\t\t\t\t글쓰기\n\t\t\t\t\t</Button>\n\t\t\t\t</Grid>\n\t\t\t</Grid>\n\t\t\t<DataTable\n\t\t\t\tcolumns={columns}\n\t\t\t\trows={data}\n\t\t\t\trowsPerPageOptions={[10, 20, 30]}\n\t\t\t\tisLoading={isLoading}\n\t\t\t\trowClick={rowClick}\n\t\t\t/>\n\t\t</>\n\t);\n};\nexport default Board;\n\nconst columns = [\n\t{\n\t\tid: 'title',\n\t\tlabel: '제목',\n\t\twidth: 290,\n\t\talign: 'left',\n\t},\n\t{\n\t\tid: 'author',\n\t\tlabel: '작성자',\n\t\twidth: 60,\n\t\talign: 'left',\n\t},\n];\n"],"sourceRoot":""}